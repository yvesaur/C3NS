<func-def> := <keyword>:FUNC <identifier>? ( <identifier> (, <identifier>)*)? ) 
              -> <expr>
           |  { <newline> <statement> }

<while-expr> := <keyword>:WHILE ( <expr> ) { 
                <expr> }
             |  <newline> <statement> }

<for-expr> := <keyword>:FOR ( <identifier> = <expr> ) { 
              <expr> }
           |  <newline> <statement> } 

<if-expr-else> := <keyword>:ELSE {
                  <expr> }
               |  <newline> <statement> }

<if-expr-elif> := <keyword>:ELIF ( <expr> ) { 
                  <expr> } <if-expr-elif>|<if-expr-else>
               |  <newline> <statement> } <if-expr-elif>|<if-expr-else>

<if-expr> := <keyword>:IF ( <expr> ) { 
             <expr> } <if-expr-elif>|<if-expr-else>
          | <newline> <statement> } <if-expr-elif>|<if-expr-else>


<list-expr> := [ ( <expr> (, <expr> )* )? ]

<atom> := INT|FLOAT|IDENTIFIER|STRING
       := <LPAREN> <expr> <RPAREN>
       := <list-expr>
       := <if-expr>
       := <for-expr>
       := <while-expr>
       := <func-def>

<call> := <atom> ( ( <expr> (, <expr> )* )? )?

<power> := <call> (<POW> <factor>)*

<factor> := (PLUS|MINUS) factor
         := <power>

<term> := <factor> ((MUL|DIV) <factor>)*

<arithmetic> := <term> ((PLUS|MINUS) <term>)*

<comparison>  := NOT <comparison>
              := <arithmetic> ((EE|LT|GT|LTE|GTE) <arithmetic>)*

<expr> := <keyword>:<var> <ident> <eq> <expr>
       := <comparison> ((<keyword>:AND | <keyword>:OR) <comparison>)*

<statement> := <newline>* <expr> (<newline>+ <expr>)* <newline>*

